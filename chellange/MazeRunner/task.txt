PART 2
In this stage, you will develop an algorithm for creating a maze.

Don't forget the rules of the correct maze:

There should be walls around the maze, except for two cells: entrance and exit.
Any empty cell must be accessible from the entrance or exit of the maze. It is not possible to walk along the maze diagonally, only vertically and horizontally.
There's got to be a path from the entrance to the exit. It doesn't matter what is considered an entrance and what is an exit as they are interchangeable.
The maze should not contain 3x3 blocks consisting of walls only. Try to fill the entire maze area with pathways.
There is a very good algorithm for building a maze, based on the construction of a minimal spanning tree. You can watch the video on how this algorithm works.

It should be possible to specify the size of the maze. After a user enters the size, the program must print a maze and then stop.

Break your program down into a set of methods to make it easy to understand and add to or edit later.

Objectives
After starting, your program should ask a user to enter the size of the maze, then output a generated maze, and then stop. The user should input 2 numbers. The first number is height and the second number is width.

Examples
The greater-than symbol followed by a space (> ) represents the user input. Note that it's not part of the input.


PART 3
Description
The program should provide a menu with five options:

Generate a new maze.
Load a maze.
Save the maze.
Display the maze.
Exit.
After a maze is generated or loaded from a file, it becomes the current maze that can be saved or displayed.

If there is no current maze (generated or loaded), a user should not see the options save and display the maze. If a user chooses an option that requires a file, he must enter a path to the file. You must always check the result of processing files and display user-friendly messages.

The program should output the maze to the user only in two scenarios:

After generating a maze;
After choosing an option display the maze.
Your program must successfully handle the following cases:

if an incorrect option was chosen, the program must print a message like Incorrect option. Please try again;
if a file to load a maze does not exist, the program should not stop, it must print a message like The file ... does not exist;
if a file has an invalid format for a maze, the program should not stop, but it must print a message like Cannot load the maze. It has an invalid format.
By the way, you can store the maze in any format, the tests do not check the contents of the file. The most important thing is that the saved maze must be correctly loaded into the program.

Objectives
After starting, your program must print a menu listing only appropriate options. When a user has chosen an option, the program must perform the corresponding action. Notice that the maze should be a square, so the user should input a single integer in order to specify the maze size.

Note, the program should not stop until the user selects the exit option.

Example
The greater-than symbol followed by a space (> ) represents the user input. Notice that it's not part of the input.

PART 4
Description
Modify the menu by adding a new option:

1. Generate a new maze.
2. Load a maze.
3. Save the maze.
4. Display the maze.
5. Find the escape.
0. Exit.

This option should be available only if a current maze exists.

Do not save the data about the escape path to the files and do not display the escape path when the user chooses the fourth option. Mark the escape path with the / symbol.

Objectives
After starting, your program must print a menu listing only appropriate options. When a user has chosen an option, the program must perform the corresponding action.

Note, the program should not stop until the user selects the exit option.
